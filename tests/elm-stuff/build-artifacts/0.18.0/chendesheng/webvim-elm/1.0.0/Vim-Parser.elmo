var _chendesheng$webvim_elm$Vim_Parser$gMotionPart = function (map) {
	var define = F2(
		function (key, op) {
			return A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
							map(op)),
						_1: {
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
								{
									ctor: '::',
									_0: 'g',
									_1: {
										ctor: '::',
										_0: key,
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
								_1: {ctor: '[]'}
							}
						}
					}),
				_elm_tools$parser$Parser$symbol(key));
		});
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				define,
				'g',
				_chendesheng$webvim_elm$Vim_State$LineNumber(0)),
			_1: {
				ctor: '::',
				_0: A2(
					define,
					'j',
					_chendesheng$webvim_elm$Vim_State$VLineDelta(1)),
				_1: {
					ctor: '::',
					_0: A2(
						define,
						'k',
						_chendesheng$webvim_elm$Vim_State$VLineDelta(-1)),
					_1: {
						ctor: '::',
						_0: A2(
							define,
							'n',
							_chendesheng$webvim_elm$Vim_State$MatchString(_chendesheng$webvim_elm$Vim_State$Forward)),
						_1: {
							ctor: '::',
							_0: A2(
								define,
								'N',
								_chendesheng$webvim_elm$Vim_State$MatchString(_chendesheng$webvim_elm$Vim_State$Backward)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _chendesheng$webvim_elm$Vim_Parser$gOperator = function () {
	var define = F2(
		function (key, modeDelta) {
			return A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(
					_chendesheng$webvim_elm$Vim_Helper$pushComplete(modeDelta)),
				_elm_tools$parser$Parser$symbol(key));
		});
	return A4(
		_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
		'g',
		{
			ctor: '::',
			_0: _chendesheng$webvim_elm$Vim_State$PushKey('g'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'},
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: _chendesheng$webvim_elm$Vim_Parser$gMotionPart(_chendesheng$webvim_elm$Vim_State$Move),
				_1: {
					ctor: '::',
					_0: A2(
						define,
						'J',
						{
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
								_chendesheng$webvim_elm$Vim_State$Join(true)),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
									{
										ctor: '::',
										_0: 'g',
										_1: {
											ctor: '::',
											_0: 'J',
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								function (_p0) {
									return _chendesheng$webvim_elm$Vim_Helper$pushComplete(
										A2(_chendesheng$webvim_elm$Vim_Helper$makePushKeys, 'g', _p0));
								}),
							_chendesheng$webvim_elm$Vim_Key$keyParser),
						_1: {ctor: '[]'}
					}
				}
			}));
}();
var _chendesheng$webvim_elm$Vim_Parser$gMotion = function (map) {
	return A4(
		_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
		'g',
		{
			ctor: '::',
			_0: _chendesheng$webvim_elm$Vim_State$PushKey('g'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
				{
					ctor: '::',
					_0: 'g',
					_1: {
						ctor: '::',
						_0: '<esc>',
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
				_1: {ctor: '[]'}
			}
		},
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: _chendesheng$webvim_elm$Vim_Parser$gMotionPart(map),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							function (_p1) {
								return _chendesheng$webvim_elm$Vim_Helper$pushComplete(
									A2(_chendesheng$webvim_elm$Vim_Helper$makePushKeys, 'g', _p1));
							}),
						_chendesheng$webvim_elm$Vim_Key$keyParser),
					_1: {ctor: '[]'}
				}
			}));
};
var _chendesheng$webvim_elm$Vim_Parser$textObject = function (map) {
	var define = F2(
		function (pair, obj) {
			return A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
				_elm_tools$parser$Parser$oneOf(
					{
						ctor: '::',
						_0: A4(
							_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
							'i',
							{
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushKey('i'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'},
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								_elm_tools$parser$Parser$succeed(
									{
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
											A2(map, obj, false)),
										_1: {
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
												{
													ctor: '::',
													_0: 'i',
													_1: {
														ctor: '::',
														_0: pair,
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
												_1: {ctor: '[]'}
											}
										}
									}),
								_elm_tools$parser$Parser$symbol(pair))),
						_1: {
							ctor: '::',
							_0: A4(
								_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
								'a',
								{
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushKey('a'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'},
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									_elm_tools$parser$Parser$succeed(
										{
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
												A2(map, obj, true)),
											_1: {
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
													{
														ctor: '::',
														_0: 'a',
														_1: {
															ctor: '::',
															_0: pair,
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
													_1: {ctor: '[]'}
												}
											}
										}),
									_elm_tools$parser$Parser$symbol(pair))),
							_1: {ctor: '[]'}
						}
					}));
		});
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(define, 'w', _chendesheng$webvim_elm$Vim_State$Word),
			_1: {
				ctor: '::',
				_0: A2(define, 'W', _chendesheng$webvim_elm$Vim_State$WORD),
				_1: {
					ctor: '::',
					_0: A2(
						define,
						'(',
						_chendesheng$webvim_elm$Vim_State$Pair(
							_elm_lang$core$Native_Utils.chr('('))),
					_1: {
						ctor: '::',
						_0: A2(
							define,
							')',
							_chendesheng$webvim_elm$Vim_State$Pair(
								_elm_lang$core$Native_Utils.chr(')'))),
						_1: {
							ctor: '::',
							_0: A2(
								define,
								'{',
								_chendesheng$webvim_elm$Vim_State$Pair(
									_elm_lang$core$Native_Utils.chr('{'))),
							_1: {
								ctor: '::',
								_0: A2(
									define,
									'}',
									_chendesheng$webvim_elm$Vim_State$Pair(
										_elm_lang$core$Native_Utils.chr('}'))),
								_1: {
									ctor: '::',
									_0: A2(
										define,
										'[',
										_chendesheng$webvim_elm$Vim_State$Pair(
											_elm_lang$core$Native_Utils.chr('['))),
									_1: {
										ctor: '::',
										_0: A2(
											define,
											']',
											_chendesheng$webvim_elm$Vim_State$Pair(
												_elm_lang$core$Native_Utils.chr(']'))),
										_1: {
											ctor: '::',
											_0: A2(
												define,
												'b',
												_chendesheng$webvim_elm$Vim_State$Pair(
													_elm_lang$core$Native_Utils.chr('('))),
											_1: {
												ctor: '::',
												_0: A2(
													define,
													'B',
													_chendesheng$webvim_elm$Vim_State$Pair(
														_elm_lang$core$Native_Utils.chr('{'))),
												_1: {
													ctor: '::',
													_0: A2(
														define,
														'\\<',
														_chendesheng$webvim_elm$Vim_State$Pair(
															_elm_lang$core$Native_Utils.chr('<'))),
													_1: {
														ctor: '::',
														_0: A2(
															define,
															'>',
															_chendesheng$webvim_elm$Vim_State$Pair(
																_elm_lang$core$Native_Utils.chr('>'))),
														_1: {
															ctor: '::',
															_0: A2(
																define,
																't',
																_chendesheng$webvim_elm$Vim_State$Pair(
																	_elm_lang$core$Native_Utils.chr('t'))),
															_1: {
																ctor: '::',
																_0: A2(define, 'w', _chendesheng$webvim_elm$Vim_State$Word),
																_1: {
																	ctor: '::',
																	_0: A2(define, 'W', _chendesheng$webvim_elm$Vim_State$WORD),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			define,
																			'(',
																			_chendesheng$webvim_elm$Vim_State$Pair(
																				_elm_lang$core$Native_Utils.chr('('))),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				define,
																				')',
																				_chendesheng$webvim_elm$Vim_State$Pair(
																					_elm_lang$core$Native_Utils.chr(')'))),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					define,
																					'{',
																					_chendesheng$webvim_elm$Vim_State$Pair(
																						_elm_lang$core$Native_Utils.chr('{'))),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						define,
																						'}',
																						_chendesheng$webvim_elm$Vim_State$Pair(
																							_elm_lang$core$Native_Utils.chr('}'))),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							define,
																							'[',
																							_chendesheng$webvim_elm$Vim_State$Pair(
																								_elm_lang$core$Native_Utils.chr('['))),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								define,
																								']',
																								_chendesheng$webvim_elm$Vim_State$Pair(
																									_elm_lang$core$Native_Utils.chr(']'))),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									define,
																									'b',
																									_chendesheng$webvim_elm$Vim_State$Pair(
																										_elm_lang$core$Native_Utils.chr('('))),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										define,
																										'B',
																										_chendesheng$webvim_elm$Vim_State$Pair(
																											_elm_lang$core$Native_Utils.chr('{'))),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											define,
																											'\\<',
																											_chendesheng$webvim_elm$Vim_State$Pair(
																												_elm_lang$core$Native_Utils.chr('<'))),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												define,
																												'>',
																												_chendesheng$webvim_elm$Vim_State$Pair(
																													_elm_lang$core$Native_Utils.chr('>'))),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													define,
																													't',
																													_chendesheng$webvim_elm$Vim_State$Pair(
																														_elm_lang$core$Native_Utils.chr('t'))),
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _chendesheng$webvim_elm$Vim_Parser$linebuffer = F2(
	function (prefix, map) {
		var define = F2(
			function (key, op) {
				return A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(
						{
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
								map(op)),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
								_1: {ctor: '[]'}
							}
						}),
					_elm_tools$parser$Parser$symbol(key));
			});
		return A2(
			_elm_tools$parser$Parser_ops['|='],
			_elm_tools$parser$Parser$succeed(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					})(
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushKey(prefix),
						_1: {
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushMode(
								_chendesheng$webvim_elm$Vim_State$ModeNameEx(prefix)),
							_1: {ctor: '[]'}
						}
					})),
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(
							{
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
									map(_chendesheng$webvim_elm$Vim_State$Execute)),
								_1: {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PopMode,
									_1: {
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
										_1: {ctor: '[]'}
									}
								}
							}),
						_elm_tools$parser$Parser$symbol('<cr>')),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser_ops['|.'],
							_elm_tools$parser$Parser$succeed(
								{
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PopMode,
									_1: {
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
										_1: {ctor: '[]'}
									}
								}),
							_elm_tools$parser$Parser$symbol('<esc>')),
						_1: {
							ctor: '::',
							_0: A2(
								define,
								'<c-h>',
								_chendesheng$webvim_elm$Vim_State$ExInsert(
									_chendesheng$webvim_elm$Vim_State$DeleteChar(_chendesheng$webvim_elm$Vim_State$Backward))),
							_1: {
								ctor: '::',
								_0: A2(
									define,
									'<backspace>',
									_chendesheng$webvim_elm$Vim_State$ExInsert(
										_chendesheng$webvim_elm$Vim_State$DeleteChar(_chendesheng$webvim_elm$Vim_State$Backward))),
								_1: {
									ctor: '::',
									_0: A2(
										define,
										'<delete>',
										_chendesheng$webvim_elm$Vim_State$ExInsert(
											_chendesheng$webvim_elm$Vim_State$DeleteChar(_chendesheng$webvim_elm$Vim_State$Backward))),
									_1: {
										ctor: '::',
										_0: A2(
											define,
											'<c-w>',
											_chendesheng$webvim_elm$Vim_State$ExInsert(
												_chendesheng$webvim_elm$Vim_State$DeleteWord(_chendesheng$webvim_elm$Vim_State$Backward))),
										_1: {
											ctor: '::',
											_0: A2(
												define,
												'<c-e>',
												_chendesheng$webvim_elm$Vim_State$ExInsert(_chendesheng$webvim_elm$Vim_State$GotoLineEnd)),
											_1: {
												ctor: '::',
												_0: A2(
													define,
													'<c-b>',
													_chendesheng$webvim_elm$Vim_State$ExInsert(_chendesheng$webvim_elm$Vim_State$GotoLineStart)),
												_1: {
													ctor: '::',
													_0: A4(
														_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
														'<c-r>',
														{
															ctor: '::',
															_0: _chendesheng$webvim_elm$Vim_State$PushKey('<c-r>'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'},
														_elm_tools$parser$Parser$oneOf(
															{
																ctor: '::',
																_0: A2(
																	_elm_tools$parser$Parser_ops['|.'],
																	_elm_tools$parser$Parser$succeed(
																		{
																			ctor: '::',
																			_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
																				map(_chendesheng$webvim_elm$Vim_State$InsertWordUnderCursor)),
																			_1: {ctor: '[]'}
																		}),
																	_elm_tools$parser$Parser$symbol('<c-w>')),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_tools$parser$Parser_ops['|='],
																		_elm_tools$parser$Parser$succeed(
																			function (key) {
																				return _chendesheng$webvim_elm$Vim_Register$isRegister(key) ? {
																					ctor: '::',
																					_0: _chendesheng$webvim_elm$Vim_State$PushRegister(key),
																					_1: {
																						ctor: '::',
																						_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
																							map(
																								_chendesheng$webvim_elm$Vim_State$ExInsert(_chendesheng$webvim_elm$Vim_State$PutRegister))),
																						_1: {ctor: '[]'}
																					}
																				} : {ctor: '[]'};
																			}),
																		_chendesheng$webvim_elm$Vim_Key$keyParser),
																	_1: {ctor: '[]'}
																}
															})),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_tools$parser$Parser_ops['|='],
															_elm_tools$parser$Parser$succeed(
																function (ch) {
																	return {
																		ctor: '::',
																		_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
																			map(
																				_chendesheng$webvim_elm$Vim_State$ExInsert(
																					_chendesheng$webvim_elm$Vim_State$InsertString(ch)))),
																		_1: {ctor: '[]'}
																	};
																}),
															_chendesheng$webvim_elm$Vim_Key$keyParser),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _chendesheng$webvim_elm$Vim_Parser$motion = F2(
	function (map, gMotion) {
		var matchString = F2(
			function (prefix, direction) {
				return A4(
					_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
					prefix,
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushKey(prefix),
						_1: {
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushMode(
								_chendesheng$webvim_elm$Vim_State$ModeNameEx(prefix)),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'},
					A2(
						_chendesheng$webvim_elm$Vim_Parser$linebuffer,
						prefix,
						function (cmd) {
							return _elm_lang$core$Native_Utils.eq(cmd, _chendesheng$webvim_elm$Vim_State$Execute) ? map(
								_chendesheng$webvim_elm$Vim_State$MatchString(direction)) : _chendesheng$webvim_elm$Vim_State$ExMode(cmd);
						}));
			});
		var define = F2(
			function (ch, m) {
				return A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(
						{
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
								map(m)),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushKey(ch),
								_1: {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
									_1: {ctor: '[]'}
								}
							}
						}),
					_elm_tools$parser$Parser$symbol(ch));
			});
		var matchChar = F3(
			function (trigger, direction, inclusive) {
				return A4(
					_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
					trigger,
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushKey(trigger),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
							{
								ctor: '::',
								_0: trigger,
								_1: {
									ctor: '::',
									_0: '<esc>',
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
							_1: {ctor: '[]'}
						}
					},
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							function (ch) {
								return {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
										map(
											_chendesheng$webvim_elm$Vim_State$MatchChar(
												{$char: ch, direction: direction, inclusive: inclusive}))),
									_1: {
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
											{
												ctor: '::',
												_0: trigger,
												_1: {
													ctor: '::',
													_0: ch,
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
											_1: {ctor: '[]'}
										}
									}
								};
							}),
						_chendesheng$webvim_elm$Vim_Key$keyParser));
			});
		var byClass = F3(
			function (ch, direction, $class) {
				return A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(
						{
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
								map(
									_chendesheng$webvim_elm$Vim_State$ByClass(
										{direction: direction, $class: $class}))),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushKey(ch),
								_1: {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
									_1: {ctor: '[]'}
								}
							}
						}),
					_elm_tools$parser$Parser$symbol(ch));
			});
		return _elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A3(byClass, 'b', _chendesheng$webvim_elm$Vim_State$Backward, _chendesheng$webvim_elm$Vim_State$WordStart),
				_1: {
					ctor: '::',
					_0: A3(byClass, 'B', _chendesheng$webvim_elm$Vim_State$Backward, _chendesheng$webvim_elm$Vim_State$WORDStart),
					_1: {
						ctor: '::',
						_0: A3(byClass, 'e', _chendesheng$webvim_elm$Vim_State$Forward, _chendesheng$webvim_elm$Vim_State$WordEnd),
						_1: {
							ctor: '::',
							_0: A3(byClass, 'E', _chendesheng$webvim_elm$Vim_State$Forward, _chendesheng$webvim_elm$Vim_State$WORDEnd),
							_1: {
								ctor: '::',
								_0: A3(byClass, 'w', _chendesheng$webvim_elm$Vim_State$Forward, _chendesheng$webvim_elm$Vim_State$WordStart),
								_1: {
									ctor: '::',
									_0: A3(byClass, 'W', _chendesheng$webvim_elm$Vim_State$Forward, _chendesheng$webvim_elm$Vim_State$WORDEnd),
									_1: {
										ctor: '::',
										_0: A3(byClass, 'h', _chendesheng$webvim_elm$Vim_State$Backward, _chendesheng$webvim_elm$Vim_State$CharStart),
										_1: {
											ctor: '::',
											_0: A2(
												define,
												'j',
												_chendesheng$webvim_elm$Vim_State$LineDelta(1)),
											_1: {
												ctor: '::',
												_0: A2(
													define,
													'k',
													_chendesheng$webvim_elm$Vim_State$LineDelta(-1)),
												_1: {
													ctor: '::',
													_0: A3(byClass, 'l', _chendesheng$webvim_elm$Vim_State$Forward, _chendesheng$webvim_elm$Vim_State$CharStart),
													_1: {
														ctor: '::',
														_0: A3(byClass, '^', _chendesheng$webvim_elm$Vim_State$Backward, _chendesheng$webvim_elm$Vim_State$LineFirst),
														_1: {
															ctor: '::',
															_0: A3(byClass, '0', _chendesheng$webvim_elm$Vim_State$Backward, _chendesheng$webvim_elm$Vim_State$LineStart),
															_1: {
																ctor: '::',
																_0: A3(byClass, '$', _chendesheng$webvim_elm$Vim_State$Forward, _chendesheng$webvim_elm$Vim_State$LineEnd),
																_1: {
																	ctor: '::',
																	_0: A2(define, 'G', _chendesheng$webvim_elm$Vim_State$LastLine),
																	_1: {
																		ctor: '::',
																		_0: A3(matchChar, 'f', _chendesheng$webvim_elm$Vim_State$Forward, _chendesheng$webvim_elm$Vim_State$Inclusive),
																		_1: {
																			ctor: '::',
																			_0: A3(matchChar, 'F', _chendesheng$webvim_elm$Vim_State$Backward, _chendesheng$webvim_elm$Vim_State$Inclusive),
																			_1: {
																				ctor: '::',
																				_0: A3(matchChar, 't', _chendesheng$webvim_elm$Vim_State$Forward, _chendesheng$webvim_elm$Vim_State$Exclusive),
																				_1: {
																					ctor: '::',
																					_0: A3(matchChar, 'T', _chendesheng$webvim_elm$Vim_State$Backward, _chendesheng$webvim_elm$Vim_State$Exclusive),
																					_1: {
																						ctor: '::',
																						_0: A2(define, 'H', _chendesheng$webvim_elm$Vim_State$ViewTop),
																						_1: {
																							ctor: '::',
																							_0: A2(define, 'M', _chendesheng$webvim_elm$Vim_State$ViewMiddle),
																							_1: {
																								ctor: '::',
																								_0: A2(define, 'L', _chendesheng$webvim_elm$Vim_State$ViewBottom),
																								_1: {
																									ctor: '::',
																									_0: A2(define, '%', _chendesheng$webvim_elm$Vim_State$MatchPair),
																									_1: {
																										ctor: '::',
																										_0: gMotion(map),
																										_1: {
																											ctor: '::',
																											_0: A2(matchString, '/', _chendesheng$webvim_elm$Vim_State$Forward),
																											_1: {
																												ctor: '::',
																												_0: A2(matchString, '?', _chendesheng$webvim_elm$Vim_State$Backward),
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _chendesheng$webvim_elm$Vim_Parser$insertMode = function (map) {
	return A2(
		_elm_tools$parser$Parser_ops['|='],
		_elm_tools$parser$Parser$succeed(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				})(
				{
					ctor: '::',
					_0: _chendesheng$webvim_elm$Vim_State$PushMode(_chendesheng$webvim_elm$Vim_State$ModeNameInsert),
					_1: {ctor: '[]'}
				})),
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A4(
					_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
					'<c-r>',
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushKey('<c-r>'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'},
					_elm_tools$parser$Parser$oneOf(
						{
							ctor: '::',
							_0: A2(
								_elm_tools$parser$Parser_ops['|='],
								_elm_tools$parser$Parser$succeed(
									function (key) {
										return _chendesheng$webvim_elm$Vim_Register$isRegister(key) ? {
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushRegister(key),
											_1: {
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
													map(_chendesheng$webvim_elm$Vim_State$PutRegister)),
												_1: {ctor: '[]'}
											}
										} : {ctor: '[]'};
									}),
								_chendesheng$webvim_elm$Vim_Key$keyParser),
							_1: {ctor: '[]'}
						})),
				_1: {
					ctor: '::',
					_0: A4(
						_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
						'<c-o>',
						{
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushKey('<c-o>'),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushMode(_chendesheng$webvim_elm$Vim_State$ModeNameTempNormal),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'},
						A2(
							_elm_tools$parser$Parser$andThen,
							function (modeDelta) {
								var op = _chendesheng$webvim_elm$Vim_Helper$aggregateOperator(modeDelta);
								var modeName = _chendesheng$webvim_elm$Vim_Helper$aggregateModeName(modeDelta);
								return _elm_tools$parser$Parser$succeed(
									function () {
										var _p2 = op;
										if (_p2.ctor === 'Nothing') {
											return (_chendesheng$webvim_elm$Vim_Helper$isComplete(modeDelta) || _elm_lang$core$Native_Utils.eq(modeName, _chendesheng$webvim_elm$Vim_State$ModeNameInsert)) ? {ctor: '[]'} : A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: _chendesheng$webvim_elm$Vim_State$PushMode(_chendesheng$webvim_elm$Vim_State$ModeNameTempNormal),
													_1: {
														ctor: '::',
														_0: _chendesheng$webvim_elm$Vim_State$PushKey('<c-o>'),
														_1: {ctor: '[]'}
													}
												},
												modeDelta);
										} else {
											return {
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushOperator(_p2._0),
												_1: {ctor: '[]'}
											};
										}
									}());
							},
							_elm_tools$parser$Parser$lazy(
								function (_p3) {
									return _chendesheng$webvim_elm$Vim_Parser$operator(false);
								}))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser$map,
							function (key) {
								return {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
										map(
											_chendesheng$webvim_elm$Vim_State$DeleteChar(_chendesheng$webvim_elm$Vim_State$Backward))),
									_1: {ctor: '[]'}
								};
							},
							_elm_tools$parser$Parser$oneOf(
								{
									ctor: '::',
									_0: _elm_tools$parser$Parser$symbol('<c-h>'),
									_1: {
										ctor: '::',
										_0: _elm_tools$parser$Parser$symbol('<backspace>'),
										_1: {
											ctor: '::',
											_0: _elm_tools$parser$Parser$symbol('<delete>'),
											_1: {ctor: '[]'}
										}
									}
								})),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_tools$parser$Parser_ops['|.'],
								_elm_tools$parser$Parser$succeed(
									{
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
											map(
												_chendesheng$webvim_elm$Vim_State$DeleteWord(_chendesheng$webvim_elm$Vim_State$Backward))),
										_1: {ctor: '[]'}
									}),
								_elm_tools$parser$Parser$symbol('<c-w>')),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_tools$parser$Parser_ops['|='],
									_elm_tools$parser$Parser$succeed(
										function (ch) {
											return {
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
													map(
														_chendesheng$webvim_elm$Vim_State$InsertString(ch))),
												_1: {ctor: '[]'}
											};
										}),
									_chendesheng$webvim_elm$Vim_Key$keyParser),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}));
};
var _chendesheng$webvim_elm$Vim_Parser$operator = function (isVisual) {
	var rangeOperator = F3(
		function (key, op, opop) {
			return A2(
				_chendesheng$webvim_elm$Vim_Helper$completeAndThen,
				function (modeDelta) {
					return _elm_lang$core$Native_Utils.eq(key, 'c') ? A2(
						_chendesheng$webvim_elm$Vim_Helper$completeAndThen,
						_chendesheng$webvim_elm$Vim_Helper$parserPopKey,
						A2(
							_elm_tools$parser$Parser$map,
							F2(
								function (x, y) {
									return A2(_elm_lang$core$Basics_ops['++'], x, y);
								})(
								_chendesheng$webvim_elm$Vim_Helper$popComplete(modeDelta)),
							_elm_tools$parser$Parser$oneOf(
								{
									ctor: '::',
									_0: A2(
										_elm_tools$parser$Parser_ops['|.'],
										_elm_tools$parser$Parser$succeed(
											{
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushMode(_chendesheng$webvim_elm$Vim_State$ModeNameInsert),
												_1: {ctor: '[]'}
											}),
										_elm_tools$parser$Parser$end),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_tools$parser$Parser_ops['|.'],
											_elm_tools$parser$Parser$succeed(
												{
													ctor: '::',
													_0: _chendesheng$webvim_elm$Vim_State$PopMode,
													_1: {
														ctor: '::',
														_0: _chendesheng$webvim_elm$Vim_State$PopOperator,
														_1: {
															ctor: '::',
															_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
															_1: {ctor: '[]'}
														}
													}
												}),
											_elm_tools$parser$Parser$symbol('<esc>')),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_tools$parser$Parser$map,
												F2(
													function (x, y) {
														return A2(_elm_lang$core$Basics_ops['++'], x, y);
													})(
													{
														ctor: '::',
														_0: _chendesheng$webvim_elm$Vim_State$PopOperator,
														_1: {ctor: '[]'}
													}),
												_chendesheng$webvim_elm$Vim_Parser$insertMode(_chendesheng$webvim_elm$Vim_State$InsertMode)),
											_1: {ctor: '[]'}
										}
									}
								}))) : _chendesheng$webvim_elm$Vim_Helper$parserPopKey(modeDelta);
				},
				A4(
					_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
					key,
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushKey(key),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'},
					_elm_tools$parser$Parser$oneOf(
						{
							ctor: '::',
							_0: A2(
								_elm_tools$parser$Parser_ops['|.'],
								_elm_tools$parser$Parser$succeed(
									{
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushKey(key),
										_1: {
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushOperator(opop),
											_1: {
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
												_1: {ctor: '[]'}
											}
										}
									}),
								_elm_tools$parser$Parser$symbol(key)),
							_1: {
								ctor: '::',
								_0: A4(
									_chendesheng$webvim_elm$Vim_Helper$keyParserAndThen,
									_elm_tools$parser$Parser$source(
										_elm_tools$parser$Parser$oneOf(
											{
												ctor: '::',
												_0: _elm_tools$parser$Parser$symbol('v'),
												_1: {
													ctor: '::',
													_0: _elm_tools$parser$Parser$symbol('V'),
													_1: {
														ctor: '::',
														_0: _elm_tools$parser$Parser$symbol('<c-v>'),
														_1: {ctor: '[]'}
													}
												}
											})),
									function (key1) {
										return {
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
												{
													ctor: '::',
													_0: key,
													_1: {
														ctor: '::',
														_0: key1,
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										};
									},
									{ctor: '[]'},
									A2(
										_elm_tools$parser$Parser$map,
										F2(
											function (x, y) {
												return A2(_elm_lang$core$Basics_ops['++'], x, y);
											})(
											{
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
													{
														ctor: '::',
														_0: key,
														_1: {
															ctor: '::',
															_0: 'v',
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}),
										_elm_tools$parser$Parser$oneOf(
											{
												ctor: '::',
												_0: A2(
													_chendesheng$webvim_elm$Vim_Parser$motion,
													function (_p4) {
														return op(
															A2(_chendesheng$webvim_elm$Vim_State$MotionRange, _chendesheng$webvim_elm$Vim_State$Inclusive, _p4));
													},
													_chendesheng$webvim_elm$Vim_Parser$gMotion),
												_1: {
													ctor: '::',
													_0: _chendesheng$webvim_elm$Vim_Parser$textObject(
														F2(
															function (obj, around) {
																return op(
																	A2(_chendesheng$webvim_elm$Vim_State$TextObject, obj, around));
															})),
													_1: {ctor: '[]'}
												}
											}))),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_tools$parser$Parser$map,
										F2(
											function (x, y) {
												return A2(_elm_lang$core$Basics_ops['++'], x, y);
											})(
											{
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushKey(key),
												_1: {ctor: '[]'}
											}),
										_elm_tools$parser$Parser$oneOf(
											{
												ctor: '::',
												_0: A2(
													_chendesheng$webvim_elm$Vim_Parser$motion,
													function (_p5) {
														return op(
															A2(_chendesheng$webvim_elm$Vim_State$MotionRange, _chendesheng$webvim_elm$Vim_State$Exclusive, _p5));
													},
													_chendesheng$webvim_elm$Vim_Parser$gMotion),
												_1: {
													ctor: '::',
													_0: _chendesheng$webvim_elm$Vim_Parser$textObject(
														F2(
															function (obj, around) {
																return op(
																	A2(_chendesheng$webvim_elm$Vim_State$TextObject, obj, around));
															})),
													_1: {ctor: '[]'}
												}
											})),
									_1: {ctor: '[]'}
								}
							}
						})));
		});
	var startInsert = F2(
		function (key, op) {
			return A4(
				_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
				key,
				A2(
					_elm_lang$core$Basics_ops['++'],
					op,
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushMode(_chendesheng$webvim_elm$Vim_State$ModeNameInsert),
						_1: {
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushKey(key),
							_1: {ctor: '[]'}
						}
					}),
				{
					ctor: '::',
					_0: _chendesheng$webvim_elm$Vim_State$PopMode,
					_1: {
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_tools$parser$Parser$map,
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						})(
						{
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushKey(key),
							_1: {ctor: '[]'}
						}),
					_chendesheng$webvim_elm$Vim_Parser$insertMode(_chendesheng$webvim_elm$Vim_State$InsertMode)));
		});
	var define = F2(
		function (key, op) {
			return A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(
					{
						ctor: '::',
						_0: _chendesheng$webvim_elm$Vim_State$PushOperator(op),
						_1: {
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushKey(key),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
								_1: {ctor: '[]'}
							}
						}
					}),
				_elm_tools$parser$Parser$symbol(key));
		});
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: isVisual ? _chendesheng$webvim_elm$Vim_Parser$textObject(
				F2(
					function (obj, around) {
						return A2(_chendesheng$webvim_elm$Vim_State$Select, obj, around);
					})) : _elm_tools$parser$Parser$fail('skip'),
			_1: {
				ctor: '::',
				_0: A2(
					_chendesheng$webvim_elm$Vim_Parser$motion,
					_chendesheng$webvim_elm$Vim_State$Move,
					function (_p6) {
						return _elm_tools$parser$Parser$oneOf(
							{ctor: '[]'});
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$andThen,
						function (modeDelta) {
							return _elm_tools$parser$Parser$oneOf(
								{
									ctor: '::',
									_0: A2(
										_elm_tools$parser$Parser$map,
										F2(
											function (x, y) {
												return A2(_elm_lang$core$Basics_ops['++'], x, y);
											})(modeDelta),
										A2(
											_chendesheng$webvim_elm$Vim_Helper$completeAndThen,
											_chendesheng$webvim_elm$Vim_Helper$parserPopKey,
											_chendesheng$webvim_elm$Vim_Parser$operator(isVisual))),
									_1: {
										ctor: '::',
										_0: _elm_tools$parser$Parser$succeed(modeDelta),
										_1: {ctor: '[]'}
									}
								});
						},
						_chendesheng$webvim_elm$Vim_Register$registerParser),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser$andThen,
							function (cnt) {
								var modeDelta = {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushCount(cnt),
									_1: {
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushKey(
											_elm_lang$core$Basics$toString(cnt)),
										_1: {ctor: '[]'}
									}
								};
								return _elm_tools$parser$Parser$oneOf(
									{
										ctor: '::',
										_0: A2(
											_elm_tools$parser$Parser$map,
											F2(
												function (x, y) {
													return A2(_elm_lang$core$Basics_ops['++'], x, y);
												})(modeDelta),
											_chendesheng$webvim_elm$Vim_Parser$operator(isVisual)),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_tools$parser$Parser$map,
												_elm_lang$core$Basics$always(modeDelta),
												_elm_tools$parser$Parser$end),
											_1: {
												ctor: '::',
												_0: _elm_tools$parser$Parser$succeed(
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									});
							},
							_chendesheng$webvim_elm$Vim_Helper$countParser),
						_1: {
							ctor: '::',
							_0: A2(
								startInsert,
								'i',
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									startInsert,
									'I',
									{
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
											_chendesheng$webvim_elm$Vim_State$Move(
												_chendesheng$webvim_elm$Vim_State$ByClass(
													{$class: _chendesheng$webvim_elm$Vim_State$LineStart, direction: _chendesheng$webvim_elm$Vim_State$Backward}))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										startInsert,
										'a',
										{
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
												_chendesheng$webvim_elm$Vim_State$Move(
													_chendesheng$webvim_elm$Vim_State$ByClass(
														{$class: _chendesheng$webvim_elm$Vim_State$CharStart, direction: _chendesheng$webvim_elm$Vim_State$Forward}))),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											startInsert,
											'A',
											{
												ctor: '::',
												_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
													_chendesheng$webvim_elm$Vim_State$Move(
														_chendesheng$webvim_elm$Vim_State$ByClass(
															{$class: _chendesheng$webvim_elm$Vim_State$LineEnd, direction: _chendesheng$webvim_elm$Vim_State$Forward}))),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												startInsert,
												'D',
												{
													ctor: '::',
													_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
														_chendesheng$webvim_elm$Vim_State$Delete(
															A2(
																_chendesheng$webvim_elm$Vim_State$MotionRange,
																_chendesheng$webvim_elm$Vim_State$Exclusive,
																_chendesheng$webvim_elm$Vim_State$ByClass(
																	{$class: _chendesheng$webvim_elm$Vim_State$LineEnd, direction: _chendesheng$webvim_elm$Vim_State$Forward})))),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													startInsert,
													's',
													{
														ctor: '::',
														_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
															_chendesheng$webvim_elm$Vim_State$Delete(
																A2(
																	_chendesheng$webvim_elm$Vim_State$MotionRange,
																	_chendesheng$webvim_elm$Vim_State$Exclusive,
																	_chendesheng$webvim_elm$Vim_State$ByClass(
																		{$class: _chendesheng$webvim_elm$Vim_State$CharStart, direction: _chendesheng$webvim_elm$Vim_State$Forward})))),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														startInsert,
														'S',
														{
															ctor: '::',
															_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
																_chendesheng$webvim_elm$Vim_State$Delete(
																	A2(_chendesheng$webvim_elm$Vim_State$TextObject, _chendesheng$webvim_elm$Vim_State$Line, false))),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															startInsert,
															'o',
															{
																ctor: '::',
																_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
																	_chendesheng$webvim_elm$Vim_State$OpenNewLine(_chendesheng$webvim_elm$Vim_State$Forward)),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																startInsert,
																'O',
																{
																	ctor: '::',
																	_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
																		_chendesheng$webvim_elm$Vim_State$OpenNewLine(_chendesheng$webvim_elm$Vim_State$Backward)),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A3(
																	rangeOperator,
																	'd',
																	_chendesheng$webvim_elm$Vim_State$Delete,
																	_chendesheng$webvim_elm$Vim_State$Delete(
																		A2(_chendesheng$webvim_elm$Vim_State$TextObject, _chendesheng$webvim_elm$Vim_State$Line, true))),
																_1: {
																	ctor: '::',
																	_0: A3(
																		rangeOperator,
																		'c',
																		_chendesheng$webvim_elm$Vim_State$Delete,
																		_chendesheng$webvim_elm$Vim_State$Delete(
																			A2(_chendesheng$webvim_elm$Vim_State$TextObject, _chendesheng$webvim_elm$Vim_State$Line, false))),
																	_1: {
																		ctor: '::',
																		_0: A3(
																			rangeOperator,
																			'y',
																			_chendesheng$webvim_elm$Vim_State$Yank,
																			_chendesheng$webvim_elm$Vim_State$Yank(
																				A2(_chendesheng$webvim_elm$Vim_State$TextObject, _chendesheng$webvim_elm$Vim_State$Line, true))),
																		_1: {
																			ctor: '::',
																			_0: A3(
																				rangeOperator,
																				'>',
																				_chendesheng$webvim_elm$Vim_State$Indent(_chendesheng$webvim_elm$Vim_State$Forward),
																				A2(
																					_chendesheng$webvim_elm$Vim_State$Indent,
																					_chendesheng$webvim_elm$Vim_State$Forward,
																					A2(_chendesheng$webvim_elm$Vim_State$TextObject, _chendesheng$webvim_elm$Vim_State$Line, false))),
																			_1: {
																				ctor: '::',
																				_0: A3(
																					rangeOperator,
																					'\\<',
																					_chendesheng$webvim_elm$Vim_State$Indent(_chendesheng$webvim_elm$Vim_State$Backward),
																					A2(
																						_chendesheng$webvim_elm$Vim_State$Indent,
																						_chendesheng$webvim_elm$Vim_State$Backward,
																						A2(_chendesheng$webvim_elm$Vim_State$TextObject, _chendesheng$webvim_elm$Vim_State$Line, false))),
																				_1: {
																					ctor: '::',
																					_0: A4(
																						_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
																						':',
																						{
																							ctor: '::',
																							_0: _chendesheng$webvim_elm$Vim_State$PushKey(':'),
																							_1: {
																								ctor: '::',
																								_0: _chendesheng$webvim_elm$Vim_State$PushMode(
																									_chendesheng$webvim_elm$Vim_State$ModeNameEx(':')),
																								_1: {ctor: '[]'}
																							}
																						},
																						{ctor: '[]'},
																						A2(_chendesheng$webvim_elm$Vim_Parser$linebuffer, ':', _chendesheng$webvim_elm$Vim_State$ExMode)),
																					_1: {
																						ctor: '::',
																						_0: A4(
																							_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
																							'@',
																							{
																								ctor: '::',
																								_0: _chendesheng$webvim_elm$Vim_State$PushKey('@'),
																								_1: {ctor: '[]'}
																							},
																							{ctor: '[]'},
																							A2(
																								_elm_tools$parser$Parser$map,
																								function (key) {
																									return _chendesheng$webvim_elm$Vim_Register$isRegister(key) ? {
																										ctor: '::',
																										_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
																											{
																												ctor: '::',
																												_0: '@',
																												_1: {
																													ctor: '::',
																													_0: key,
																													_1: {ctor: '[]'}
																												}
																											}),
																										_1: {
																											ctor: '::',
																											_0: _chendesheng$webvim_elm$Vim_State$PushOperator(
																												_chendesheng$webvim_elm$Vim_State$ReplayMacro(key)),
																											_1: {
																												ctor: '::',
																												_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
																												_1: {ctor: '[]'}
																											}
																										}
																									} : {ctor: '[]'};
																								},
																								_chendesheng$webvim_elm$Vim_Key$keyParser)),
																						_1: {
																							ctor: '::',
																							_0: A2(define, 'u', _chendesheng$webvim_elm$Vim_State$Undo),
																							_1: {
																								ctor: '::',
																								_0: A2(define, '<c-r>', _chendesheng$webvim_elm$Vim_State$Redo),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										define,
																										'<c-o>',
																										_chendesheng$webvim_elm$Vim_State$JumpHistory(_chendesheng$webvim_elm$Vim_State$Backward)),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											define,
																											'<tab>',
																											_chendesheng$webvim_elm$Vim_State$JumpHistory(_chendesheng$webvim_elm$Vim_State$Forward)),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												define,
																												'<c-u>',
																												_chendesheng$webvim_elm$Vim_State$JumpByView(0.5)),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													define,
																													'<c-d>',
																													_chendesheng$webvim_elm$Vim_State$JumpByView(-0.5)),
																												_1: {
																													ctor: '::',
																													_0: A2(
																														define,
																														'<c-f>',
																														_chendesheng$webvim_elm$Vim_State$JumpByView(1)),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															define,
																															'<c-b>',
																															_chendesheng$webvim_elm$Vim_State$JumpByView(-1)),
																														_1: {
																															ctor: '::',
																															_0: A2(
																																define,
																																'<c-y>',
																																_chendesheng$webvim_elm$Vim_State$Scroll(1)),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	define,
																																	'<c-e>',
																																	_chendesheng$webvim_elm$Vim_State$Scroll(-1)),
																																_1: {
																																	ctor: '::',
																																	_0: A2(
																																		define,
																																		'<c-p>',
																																		_chendesheng$webvim_elm$Vim_State$CompleteWord(_chendesheng$webvim_elm$Vim_State$Backward)),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(
																																			define,
																																			'<c-n>',
																																			_chendesheng$webvim_elm$Vim_State$CompleteWord(_chendesheng$webvim_elm$Vim_State$Forward)),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(
																																				define,
																																				'J',
																																				_chendesheng$webvim_elm$Vim_State$Join(false)),
																																			_1: {
																																				ctor: '::',
																																				_0: A2(
																																					define,
																																					'x',
																																					_chendesheng$webvim_elm$Vim_State$Delete(
																																						A2(
																																							_chendesheng$webvim_elm$Vim_State$MotionRange,
																																							_chendesheng$webvim_elm$Vim_State$Exclusive,
																																							_chendesheng$webvim_elm$Vim_State$ByClass(
																																								{$class: _chendesheng$webvim_elm$Vim_State$CharStart, direction: _chendesheng$webvim_elm$Vim_State$Forward})))),
																																				_1: {
																																					ctor: '::',
																																					_0: A2(
																																						define,
																																						'X',
																																						_chendesheng$webvim_elm$Vim_State$Delete(
																																							A2(
																																								_chendesheng$webvim_elm$Vim_State$MotionRange,
																																								_chendesheng$webvim_elm$Vim_State$Exclusive,
																																								_chendesheng$webvim_elm$Vim_State$ByClass(
																																									{$class: _chendesheng$webvim_elm$Vim_State$CharStart, direction: _chendesheng$webvim_elm$Vim_State$Backward})))),
																																					_1: {
																																						ctor: '::',
																																						_0: _chendesheng$webvim_elm$Vim_Parser$gOperator,
																																						_1: {
																																							ctor: '::',
																																							_0: _elm_tools$parser$Parser$lazy(
																																								function (_p7) {
																																									return _chendesheng$webvim_elm$Vim_Parser$macro(isVisual);
																																								}),
																																							_1: {
																																								ctor: '::',
																																								_0: _elm_tools$parser$Parser$lazy(
																																									function (_p8) {
																																										return _chendesheng$webvim_elm$Vim_Parser$visual;
																																									}),
																																								_1: {ctor: '[]'}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _chendesheng$webvim_elm$Vim_Parser$macro = function (isVisual) {
	return A4(
		_chendesheng$webvim_elm$Vim_Helper$readKeyAndThen,
		'q',
		{
			ctor: '::',
			_0: _chendesheng$webvim_elm$Vim_State$PushKey('q'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'},
		A2(
			_elm_tools$parser$Parser$andThen,
			function (modeDelta) {
				return A2(
					_elm_tools$parser$Parser$map,
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						})(modeDelta),
					_elm_tools$parser$Parser$oneOf(
						{
							ctor: '::',
							_0: A2(
								_elm_tools$parser$Parser_ops['|.'],
								_elm_tools$parser$Parser$succeed(
									{
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PopRecordMacro,
										_1: {
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushComplete,
											_1: {ctor: '[]'}
										}
									}),
								_elm_tools$parser$Parser$symbol('q')),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_Parser$operator(isVisual),
								_1: {
									ctor: '::',
									_0: _elm_tools$parser$Parser$succeed(
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}));
			},
			A2(
				_elm_tools$parser$Parser$andThen,
				function (key) {
					return _chendesheng$webvim_elm$Vim_Register$isRegister(key) ? _elm_tools$parser$Parser$succeed(
						{
							ctor: '::',
							_0: _chendesheng$webvim_elm$Vim_State$PushKeys(
								{
									ctor: '::',
									_0: 'q',
									_1: {
										ctor: '::',
										_0: key,
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _chendesheng$webvim_elm$Vim_State$PushRecordMacro(key),
								_1: {ctor: '[]'}
							}
						}) : _elm_tools$parser$Parser$fail(
						A2(_elm_lang$core$Basics_ops['++'], 'unknown register: ', key));
				},
				_chendesheng$webvim_elm$Vim_Key$keyParser)));
};
var _chendesheng$webvim_elm$Vim_Parser$visual = function () {
	var key2mode = function (key) {
		var _p9 = key;
		switch (_p9) {
			case 'v':
				return _chendesheng$webvim_elm$Vim_State$ModeNameVisual;
			case 'V':
				return _chendesheng$webvim_elm$Vim_State$ModeNameVisualLine;
			case '<c-v>':
				return _chendesheng$webvim_elm$Vim_State$ModeNameVisualBlock;
			default:
				return _chendesheng$webvim_elm$Vim_State$ModeNameVisual;
		}
	};
	return A2(
		_elm_tools$parser$Parser$andThen,
		function (key) {
			return _elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							function (key1) {
								return (_elm_lang$core$Native_Utils.eq(key1, key) || _elm_lang$core$Native_Utils.eq(key1, '<esc>')) ? {ctor: '[]'} : (_elm_lang$core$Native_Utils.eq(key1, '') ? {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushMode(
										key2mode(key)),
									_1: {
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushKey(key),
										_1: {ctor: '[]'}
									}
								} : {
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_State$PushMode(
										key2mode(key1)),
									_1: {
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushKey(key1),
										_1: {ctor: '[]'}
									}
								});
							}),
						_elm_tools$parser$Parser$source(
							_elm_tools$parser$Parser$oneOf(
								{
									ctor: '::',
									_0: _elm_tools$parser$Parser$symbol('v'),
									_1: {
										ctor: '::',
										_0: _elm_tools$parser$Parser$symbol('V'),
										_1: {
											ctor: '::',
											_0: _elm_tools$parser$Parser$symbol('<c-v>'),
											_1: {
												ctor: '::',
												_0: _elm_tools$parser$Parser$symbol('<esc>'),
												_1: {
													ctor: '::',
													_0: _elm_tools$parser$Parser$end,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(
								F2(
									function (x, y) {
										return A2(_elm_lang$core$Basics_ops['++'], x, y);
									})(
									{
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_State$PushMode(
											key2mode(key)),
										_1: {
											ctor: '::',
											_0: _chendesheng$webvim_elm$Vim_State$PushKey(key),
											_1: {ctor: '[]'}
										}
									})),
							_elm_tools$parser$Parser$oneOf(
								{
									ctor: '::',
									_0: _chendesheng$webvim_elm$Vim_Parser$textObject(
										F2(
											function (obj, around) {
												return A2(_chendesheng$webvim_elm$Vim_State$Select, obj, around);
											})),
									_1: {
										ctor: '::',
										_0: _chendesheng$webvim_elm$Vim_Parser$operator(true),
										_1: {ctor: '[]'}
									}
								})),
						_1: {ctor: '[]'}
					}
				});
		},
		_elm_tools$parser$Parser$source(
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: _elm_tools$parser$Parser$symbol('v'),
					_1: {
						ctor: '::',
						_0: _elm_tools$parser$Parser$symbol('V'),
						_1: {
							ctor: '::',
							_0: _elm_tools$parser$Parser$symbol('<c-v>'),
							_1: {ctor: '[]'}
						}
					}
				})));
}();
var _chendesheng$webvim_elm$Vim_Parser$parse = F2(
	function (lastKeys, key) {
		if (_elm_lang$core$Native_Utils.eq(key, '<c-c>')) {
			return {ctor: '_Tuple2', _0: _chendesheng$webvim_elm$Vim_State$initialMode, _1: ''};
		} else {
			var keys = A2(
				_elm_lang$core$Basics_ops['++'],
				lastKeys,
				_chendesheng$webvim_elm$Vim_Helper$escapeKey(key));
			var modeDelta = A2(
				_elm_lang$core$Result$withDefault,
				{ctor: '[]'},
				A2(
					_elm_tools$parser$Parser$run,
					A2(
						_chendesheng$webvim_elm$Vim_Helper$completeAndThen,
						_chendesheng$webvim_elm$Vim_Helper$parserPopKey,
						_chendesheng$webvim_elm$Vim_Parser$operator(false)),
					keys));
			return {
				ctor: '_Tuple2',
				_0: {
					count: _chendesheng$webvim_elm$Vim_Helper$aggregateCount(modeDelta),
					edit: _chendesheng$webvim_elm$Vim_Helper$aggregateOperator(modeDelta),
					register: _chendesheng$webvim_elm$Vim_Helper$aggregateRegister(modeDelta),
					mode: _chendesheng$webvim_elm$Vim_Helper$aggregateModeName(modeDelta),
					recordMacro: _chendesheng$webvim_elm$Vim_Helper$aggregateRecordingMacro(modeDelta)
				},
				_1: _chendesheng$webvim_elm$Vim_Helper$aggregateKeys(modeDelta)
			};
		}
	});
